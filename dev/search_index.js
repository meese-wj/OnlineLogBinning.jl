var documenterSearchIndex = {"docs":
[{"location":"home/","page":"Home","title":"Home","text":"DocTestSetup = quote using OnlineLogBinning end","category":"page"},{"location":"home/#OnlineLogBinning","page":"Home","title":"OnlineLogBinning","text":"","category":"section"},{"location":"home/","page":"Home","title":"Home","text":"(Image: Dev) (Image: Build Status)","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"Julia package to determine effective number of uncorrelated data points in a correlated data stream via an O(log N) online binning algorithm.","category":"page"},{"location":"home/#Our-Accumulator-type-hierarchy","page":"Home","title":"Our Accumulator type hierarchy","text":"","category":"section"},{"location":"home/","page":"Home","title":"Home","text":"We implement this with three nested Accumulator structs: the outermost BinningAccumulator, the middle-level LevelAccumulator, and the innermost PairAccumulator. The BinningAccumulator stores a Vector of LevelAccumulator, each of which store their own PairAccumulator.","category":"page"},{"location":"home/#The-[BinningAccumulator](@ref)","page":"Home","title":"The BinningAccumulator","text":"","category":"section"},{"location":"home/","page":"Home","title":"Home","text":"This is the main interface to the binning statistics of a given data stream. The user should basically only mess with this type of object. The binning analysis is performed using it and all important statistical quantities can be found from it.","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"A BinningAccumulator is a wrapper around a Vector of LevelAccumulators. For a given data stream of size N, there are rm floorlog_2(N) binning levels. The BinningAccumulator has a length which is one more than the total number of binning levels, where the bottom-most level, level = 0, represents the unbinned data.","category":"page"},{"location":"home/#The-[LevelAccumulator](@ref)","page":"Home","title":"The LevelAccumulator","text":"","category":"section"},{"location":"home/","page":"Home","title":"Home","text":"This data structure keeps track of the online mean and variance for a given level. These accumulated values are only updated though after a pair from the data stream has been read in through the LevelAccumulator's PairAccumulator.","category":"page"},{"location":"home/#The-[PairAccumulator](@ref)","page":"Home","title":"The PairAccumulator","text":"","category":"section"},{"location":"home/","page":"Home","title":"Home","text":"This is the outward-facing data structure to a given data stream. Once a pair from the data stream has been read, then the mean and variance accumulators are updated for a given level, and then the mean is propagated to the next binning level, where the process is repeated. This implements the logarithmic binning analysis.","category":"page"},{"location":"home/#How-to-use-OnlineLogBinning","page":"Home","title":"How to use OnlineLogBinning","text":"","category":"section"},{"location":"home/","page":"Home","title":"Home","text":"First, construct an empty [BinningAccumulator] with of T <: Number parametric type. Let's take the default T = Float64 as an example.","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"To start, initialize a BinningAccumulator{T}:","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"julia> bacc = BinningAccumulator()\nBinningAccumulator{Float64} with 0 binning levels.\n0th Binning Level (unbinned data):\nLevelAccumulator{Float64} with online fields:\n    level    = 0\n    num_bins = 0\n    Taccum   = 0.0\n    Saccum   = 0.0\n    Paccum   = PairAccumulator{Float64}(true, [0.0, 0.0])\n\n    Calculated Level Statistics:\n    Current Mean             = NaN\n    Current Variance         = -0.0\n    Current Std. Deviation   = -0.0\n    Current Var. of the Mean = NaN\n    Current Std. Error       = NaN","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"note: Note\nWe currently only support Float types, i.e. T <: AbstractFloat or T is a Complex{Float#}. The tested types are listed in OLB_tested_numbers.","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"Then, push! either a single value or a data stream (sequence of values of itr type) to the BinningAccumulator. The online analysis will be taken care of automatically.","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"The easiest usage is by push!ing a single value into the BinningAccumulator.","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"julia> push!(bacc, 1)\nBinningAccumulator{Float64} with 0 binning levels.\n0th Binning Level (unbinned data):\nLevelAccumulator{Float64} with online fields:\n    level    = 0\n    num_bins = 0\n    Taccum   = 0.0\n    Saccum   = 0.0\n    Paccum   = PairAccumulator{Float64}(false, [0.0, 1.0])\n\n    Calculated Level Statistics:\n    Current Mean             = NaN\n    Current Variance         = -0.0\n    Current Std. Deviation   = -0.0\n    Current Var. of the Mean = NaN\n    Current Std. Error       = NaN\n","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"note: Note\nValues of incorrect type are converted to the correct type internally.","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"Additionally, one can push! a data stream into the BinningAccumulator:","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"julia> push!(bacc, [1, 2, 3, 4, 3, 2, 1])\nBinningAccumulator{Float64} with 3 binning levels.\n0th Binning Level (unbinned data):\nLevelAccumulator{Float64} with online fields:\n    level    = 0\n    num_bins = 8\n    Taccum   = 17.0\n    Saccum   = 8.875\n    Paccum   = PairAccumulator{Float64}(true, [0.0, 0.0])\n\n    Calculated Level Statistics:\n    Current Mean             = 2.125\n    Current Variance         = 1.2678571428571428\n    Current Std. Deviation   = 1.1259916264596033\n    Current Var. of the Mean = 0.15848214285714285\n    Current Std. Error       = 0.3980981573144277\n\n1th Binning Level:\nLevelAccumulator{Float64} with online fields:\n    level    = 1\n    num_bins = 4\n    Taccum   = 8.5\n    Saccum   = 3.6875\n    Paccum   = PairAccumulator{Float64}(true, [0.0, 0.0])\n\n    Calculated Level Statistics:\n    Current Mean             = 2.125\n    Current Variance         = 1.2291666666666667\n    Current Std. Deviation   = 1.1086778913041726\n    Current Var. of the Mean = 0.3072916666666667\n    Current Std. Error       = 0.5543389456520863\n\n2th Binning Level:\nLevelAccumulator{Float64} with online fields:\n    level    = 2\n    num_bins = 2\n    Taccum   = 4.25\n    Saccum   = 0.28125\n    Paccum   = PairAccumulator{Float64}(true, [0.0, 0.0])\n\n    Calculated Level Statistics:\n    Current Mean             = 2.125\n    Current Variance         = 0.28125\n    Current Std. Deviation   = 0.5303300858899106\n    Current Var. of the Mean = 0.140625\n    Current Std. Error       = 0.375\n\n3th Binning Level:\nLevelAccumulator{Float64} with online fields:\n    level    = 3\n    num_bins = 0\n    Taccum   = 0.0\n    Saccum   = 0.0\n    Paccum   = PairAccumulator{Float64}(false, [0.0, 2.125])\n\n    Calculated Level Statistics:\n    Current Mean             = NaN\n    Current Variance         = -0.0\n    Current Std. Deviation   = -0.0\n    Current Var. of the Mean = NaN\n    Current Std. Error       = NaN","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"note: Note\nThe highest binning level will typically yield useless NaN statistics, but that just reflects the fact that the num_bins, Taccum, and Saccum accumulators are only updated once the level's PairAccumulator is full.","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"One can then calculate the following statistics from the BinningAccumulator at any binning level = lvl:","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"mean(bacc::BinningAccumulator; level = lvl)           # arithmetic mean\nvar(bacc::BinningAccumulator; level = lvl)            # sample variance \nstd(bacc::BinningAccumulator; level = lvl)            # sample standard deviation \nvar_of_mean(bacc::BinningAccumulator; level = lvl)    # variance of the mean \nstd_error(bacc::BinningAccumulator; level = lvl)      # standard error of the mean ","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"The binning level is optional. By default, the binning level is set to level = 0. This level, accessed by bacc[level = 0], represents the unbinnned statistics from of the original data stream. The LevelAccumulators from any binning level can also be extracted using the overloaded [] notation as","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"julia> bacc[level = 0]\nLevelAccumulator{Float64} with online fields:\n    level    = 0\n    num_bins = 8\n    Taccum   = 17.0\n    Saccum   = 8.875\n    Paccum   = PairAccumulator{Float64}(true, [0.0, 0.0])\n\n    Calculated Level Statistics:\n    Current Mean             = 2.125\n    Current Variance         = 1.2678571428571428\n    Current Std. Deviation   = 1.1259916264596033\n    Current Var. of the Mean = 0.15848214285714285\n    Current Std. Error       = 0.3980981573144277\n\njulia> bacc[level = 1]\nLevelAccumulator{Float64} with online fields:\n    level    = 1\n    num_bins = 4\n    Taccum   = 8.5\n    Saccum   = 3.6875\n    Paccum   = PairAccumulator{Float64}(true, [0.0, 0.0])\n\n    Calculated Level Statistics:\n    Current Mean             = 2.125\n    Current Variance         = 1.2291666666666667\n    Current Std. Deviation   = 1.1086778913041726\n    Current Var. of the Mean = 0.3072916666666667\n    Current Std. Error       = 0.5543389456520863","category":"page"},{"location":"home/#For-more-information","page":"Home","title":"For more information","text":"","category":"section"},{"location":"home/","page":"Home","title":"Home","text":"See our README for details of our algorithm.","category":"page"},{"location":"home/#Similar-packages","page":"Home","title":"Similar packages","text":"","category":"section"},{"location":"home/","page":"Home","title":"Home","text":"https://github.com/carstenbauer/BinningAnalysis.jl\nhttps://github.com/joshday/OnlineStats.j","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"DocTestSetup = nothing","category":"page"},{"location":"","page":"API","title":"API","text":"CurrentModule = OnlineLogBinning","category":"page"},{"location":"#OnlineLogBinning","page":"API","title":"OnlineLogBinning","text":"","category":"section"},{"location":"","page":"API","title":"API","text":"Documentation for OnlineLogBinning.","category":"page"},{"location":"","page":"API","title":"API","text":"","category":"page"},{"location":"","page":"API","title":"API","text":"Modules = [OnlineLogBinning]","category":"page"},{"location":"#OnlineLogBinning.OLB_tested_numbers","page":"API","title":"OnlineLogBinning.OLB_tested_numbers","text":"OLB_tested_numbers\n\nDefines the list of tested numerical types for OnlineLogBinning.jl.\n\nnote: Note\nThese types are specifically given as: Float16, Float32, Float64 for Real numbers.\nComplexF16, ComplexF32, ComplexF64 for Complex numbers.\n\n\n\n\n\n","category":"constant"},{"location":"#OnlineLogBinning.BinningAccumulator","page":"API","title":"OnlineLogBinning.BinningAccumulator","text":"BinningAccumulator{T}() where {T <: Number}\n\nMain data structure for the binning analysis. T == Float64 by default in the empty constructor.\n\nContents\n\nLvlAccums::Vector{LevelAccumulator{T}}\nA wrapper around the LevelAccumulators from each binning level\n\nExample\n\njulia> # Create a BinningAccumulator with the default type T == Float64\n\njulia> bacc = BinningAccumulator()  \nBinningAccumulator{Float64} with 0 binning levels.\n0th Binning Level (unbinned data):\nLevelAccumulator{Float64} with online fields:\n    level    = 0\n    num_bins = 0\n    Taccum   = 0.0\n    Saccum   = 0.0\n    Paccum   = PairAccumulator{Float64}(true, [0.0, 0.0])\n\n    Calculated Level Statistics:\n    Current Mean             = NaN\n    Current Variance         = -0.0\n    Current Std. Deviation   = -0.0\n    Current Var. of the Mean = NaN\n    Current Std. Error       = NaN\n\njulia> # Add a data stream using the push! function\n\njulia> # (The data stream does not have to have a length == power of 2.)\n\njulia> push!(bacc, [1, 2, 3, 4])\nBinningAccumulator{Float64} with 2 binning levels.\n0th Binning Level (unbinned data):\nLevelAccumulator{Float64} with online fields:\n    level    = 0\n    num_bins = 4\n    Taccum   = 10.0\n    Saccum   = 5.0\n    Paccum   = PairAccumulator{Float64}(true, [0.0, 0.0])\n\n    Calculated Level Statistics:\n    Current Mean             = 2.5\n    Current Variance         = 1.6666666666666667\n    Current Std. Deviation   = 1.2909944487358056\n    Current Var. of the Mean = 0.4166666666666667\n    Current Std. Error       = 0.6454972243679028\n\n1th Binning Level:\nLevelAccumulator{Float64} with online fields:\n    level    = 1\n    num_bins = 2\n    Taccum   = 5.0\n    Saccum   = 2.0\n    Paccum   = PairAccumulator{Float64}(true, [0.0, 0.0])\n\n    Calculated Level Statistics:\n    Current Mean             = 2.5\n    Current Variance         = 2.0\n    Current Std. Deviation   = 1.4142135623730951\n    Current Var. of the Mean = 1.0\n    Current Std. Error       = 1.0\n\n2th Binning Level:\nLevelAccumulator{Float64} with online fields:\n    level    = 2\n    num_bins = 0\n    Taccum   = 0.0\n    Saccum   = 0.0\n    Paccum   = PairAccumulator{Float64}(false, [0.0, 2.5])\n\n    Calculated Level Statistics:\n    Current Mean             = NaN\n    Current Variance         = -0.0\n    Current Std. Deviation   = -0.0\n    Current Var. of the Mean = NaN\n    Current Std. Error       = NaN\n\n\n\n\n\n\n","category":"type"},{"location":"#OnlineLogBinning.LevelAccumulator","page":"API","title":"OnlineLogBinning.LevelAccumulator","text":"LevelAccumulator{T <: Number}\n\nAccumulator structure for a given binning level.\n\nContents\n\nlevel::Int\nRegisters the binning level this accumulator is assigned\nnum_bins::Int \nHow many elements (i.e. bins) have been added to this accumulator\nTaccum::T\nStands for Total Accumulator.\nThis represents the T accumulator for the mean: mean ≡ T / num_bins.\nSaccum::T\nStands for Square Accumulator.\nThis represents the S accumulator for the variance: var ≡ S/(num_bins - 1).\nPaccum::PairAccumulator{T}\nAn outward facing PairAccumulator to meet incoming data streams. \nThis accumulator processes the incoming data and then exports the Tvalue and Svalue into updates for Taccum and Saccum, respectively.\n\n\n\n\n\n","category":"type"},{"location":"#OnlineLogBinning.PairAccumulator","page":"API","title":"OnlineLogBinning.PairAccumulator","text":"PairAccumulator{T <: Number}\n\nAccumulator that directly faces an incoming data stream. Two values from that stream enter and are processed into the exported values of Tvalue and Svalue.\n\nContents\n\nfullpair::Bool\nA Boolean to keep track of which element of the pair is being accessed. Additionally, when fullpair == true then the contents are exported.\nvalues::MVector{2, T}\nThe individual values taken from the data stream to be processed. Both Tvalue and Svalue rely on them being accessible.\n\n\n\n\n\n","category":"type"},{"location":"#Base.eltype-Union{Tuple{BinningAccumulator{T}}, Tuple{T}} where T","page":"API","title":"Base.eltype","text":"eltype(::BinningAccumulator{T}) → T\n\nReturns the type parameter for the BinningAccumulator.\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Tuple{BinningAccumulator}","page":"API","title":"Base.getindex","text":"getindex(bacc::BinningAccumulator; level)\n\nOverload the [] notation by accessing the BinningAccumulator's LvlAccums at a specific binning level keyword.\n\nExample\n\njulia> bacc = BinningAccumulator();\n\njulia> bacc[level = 0]\nLevelAccumulator{Float64} with online fields:\n    level    = 0\n    num_bins = 0\n    Taccum   = 0.0\n    Saccum   = 0.0\n    Paccum   = PairAccumulator{Float64}(true, [0.0, 0.0])\n\n    Calculated Level Statistics:\n    Current Mean             = NaN\n    Current Variance         = -0.0\n    Current Std. Deviation   = -0.0\n    Current Var. of the Mean = NaN\n    Current Std. Error       = NaN\n\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Tuple{BinningAccumulator}","page":"API","title":"Base.length","text":"length(bacc::BinningAccumulator)\n\nReturn the number of LevelAccumulators there are.\n\nExample\n\njulia> bacc = BinningAccumulator();\n\njulia> push!(bacc, [1, 2, 3, 4, 3, 2, 1]); # Data stream with 7 elements\n\njulia> length(bacc) # Only 2 binning levels (1 for unbinned data)\n3\n\n\n\n\n\n","category":"method"},{"location":"#Base.push!-Tuple{BinningAccumulator, Any}","page":"API","title":"Base.push!","text":"push!(bacc::BinningAccumulator, itr)\n\npush! each value of the data stream itr through the BinningAccumulator.\n\nExample\n\njulia> bacc = BinningAccumulator()\nBinningAccumulator{Float64} with 0 binning levels.\n0th Binning Level (unbinned data):\nLevelAccumulator{Float64} with online fields:\n    level    = 0\n    num_bins = 0\n    Taccum   = 0.0\n    Saccum   = 0.0\n    Paccum   = PairAccumulator{Float64}(true, [0.0, 0.0])\n\n    Calculated Level Statistics:\n    Current Mean             = NaN\n    Current Variance         = -0.0\n    Current Std. Deviation   = -0.0\n    Current Var. of the Mean = NaN\n    Current Std. Error       = NaN\n\njulia> push!(bacc, [42, -26])\nBinningAccumulator{Float64} with 1 binning levels.\n0th Binning Level (unbinned data):\nLevelAccumulator{Float64} with online fields:\n    level    = 0\n    num_bins = 2\n    Taccum   = 16.0\n    Saccum   = 2312.0\n    Paccum   = PairAccumulator{Float64}(true, [0.0, 0.0])\n\n    Calculated Level Statistics:\n    Current Mean             = 8.0\n    Current Variance         = 2312.0\n    Current Std. Deviation   = 48.08326112068523\n    Current Var. of the Mean = 1156.0\n    Current Std. Error       = 34.0\n\n1th Binning Level:\nLevelAccumulator{Float64} with online fields:\n    level    = 1\n    num_bins = 0\n    Taccum   = 0.0\n    Saccum   = 0.0\n    Paccum   = PairAccumulator{Float64}(false, [0.0, 8.0])\n\n    Calculated Level Statistics:\n    Current Mean             = NaN\n    Current Variance         = -0.0\n    Current Std. Deviation   = -0.0\n    Current Var. of the Mean = NaN\n    Current Std. Error       = NaN\n\n\n\n\n\n\n","category":"method"},{"location":"#Base.push!-Tuple{BinningAccumulator, Number}","page":"API","title":"Base.push!","text":"push!(bacc::BinningAccumulator, value::Number)\n\nAdd a single value from the data stream into the online binning analysis. The single value enters at the bin at the lowest level. \n\nExample\n\njulia> bacc = BinningAccumulator()\nBinningAccumulator{Float64} with 0 binning levels.\n0th Binning Level (unbinned data):\nLevelAccumulator{Float64} with online fields:\n    level    = 0\n    num_bins = 0\n    Taccum   = 0.0\n    Saccum   = 0.0\n    Paccum   = PairAccumulator{Float64}(true, [0.0, 0.0])\n\n    Calculated Level Statistics:\n    Current Mean             = NaN\n    Current Variance         = -0.0\n    Current Std. Deviation   = -0.0\n    Current Var. of the Mean = NaN\n    Current Std. Error       = NaN\n\njulia> push!(bacc, 42)\nBinningAccumulator{Float64} with 0 binning levels.\n0th Binning Level (unbinned data):\nLevelAccumulator{Float64} with online fields:\n    level    = 0\n    num_bins = 0\n    Taccum   = 0.0\n    Saccum   = 0.0\n    Paccum   = PairAccumulator{Float64}(false, [0.0, 42.0])        \n\n    Calculated Level Statistics:\n    Current Mean             = NaN\n    Current Variance         = -0.0\n    Current Std. Deviation   = -0.0\n    Current Var. of the Mean = NaN\n    Current Std. Error       = NaN\n\n\nnote: Note\nNotice that the Taccum and Saccum remain zero while num_bins == 0.  These are only accumulated for each input pair. Or once Paccum.fullpair == true.\n\n\n\n\n\n","category":"method"},{"location":"#Base.push!-Tuple{PairAccumulator, Number}","page":"API","title":"Base.push!","text":"push!(pacc::PairAccumulator, value::Number)\n\nOverload Base.push! for a PairAccumulator. One can only  push! a single value <: Number at a time into this type of accumulator.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{IO, BinningAccumulator}","page":"API","title":"Base.show","text":"show([io::IO = stdout], bacc::BinningAccumulator)\n\nOverload the Base.show function for human-readable displays.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{IO, LevelAccumulator}","page":"API","title":"Base.show","text":"show([io = stdout], lacc::LevelAccumulator)\n\nOverload Base.show for human-readable displays.\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning.Svalue-Tuple{LevelAccumulator, Any, Any}","page":"API","title":"OnlineLogBinning.Svalue","text":"Svalue(lacc::LevelAccumulator)\n\nFunction to calculate the online S_1m+2 summation as:\n\nS_1m+2 = S_1m + S_m+1m+2 + fracm2(m+2)left( frac2m T_1m - T_m+1m+2 right)^2\n\nwhere T_m+1m+2 is the pairwise Tvalue for the PairAccumulator.\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning.Svalue-Tuple{PairAccumulator}","page":"API","title":"OnlineLogBinning.Svalue","text":"Svalue(pacc::PairAccumulator)\n\nThe S function for a single pair following the accumulation of m data points follows as \n\nbeginaligned\nS_m+1 m+2 equiv sum_k = m+1^m+2 left( x_k - frac12 T_m+1m+2 right)^2\n\n= frac12left( x_m+2 - x_m+1 right)^2\nendaligned\n\nThus, S_m+1m+2 does not need to take T_m+1m+2 as an argument.\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning.Tvalue-Tuple{LevelAccumulator, Any}","page":"API","title":"OnlineLogBinning.Tvalue","text":"Tvalue(lacc::LevelAccumulator)\n\nFunction to calculate the online T_1m+2 summation as:\n\nT_1m+2 = T_1m + T_m+1m+2\n\nwhere T_m+1m+2 is the pairwise Tvalue for the PairAccumulator.\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning.Tvalue-Tuple{PairAccumulator}","page":"API","title":"OnlineLogBinning.Tvalue","text":"Tvalue(pacc::PairAccumulator)\n\nThe T function for a single pair following the accumulation of m data points follows as \n\nT_m+1 m+2 equiv sum_k = m+1^m+2 x_k = x_m+1 + x_m+2\n\nas expected.\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning._binning_index_to_findex-Tuple{Any}","page":"API","title":"OnlineLogBinning._binning_index_to_findex","text":"_binning_index_to_findex(level)\n\nConvert the binning_index ∈ {0, 1, ... } to a (Fortran) findex ∈ {1, 2, ... }.\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning.bin_depth-Tuple{BinningAccumulator}","page":"API","title":"OnlineLogBinning.bin_depth","text":"bin_depth(bacc::BinningAccumulator)\n\nNumber of binned levels present. length of the [BinningAccumulator] minus 1.\n\nExample\n\njulia> bacc = BinningAccumulator();\n\njulia> push!(bacc, [1, 2, 3, 4, 3, 2, 1]); # Data stream with 7 elements\n\njulia> bin_depth(bacc) # Only 2 binning levels (1 for unbinned data)\n2\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning.binning_level-Tuple{Int64}","page":"API","title":"OnlineLogBinning.binning_level","text":"binning_level(index::Int)\n\nConversion from LvlAccums index to binning_level.\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning.reset!-Union{Tuple{BinningAccumulator{T}}, Tuple{T}} where T","page":"API","title":"OnlineLogBinning.reset!","text":"reset!(bacc::BinningAccumulator{T})\n\nReset the BinningAccumulator by reconstruction.\n\nAdditional information\n\nWhile this is not a literal reset per se, with a large enough BinningAccumulator it will be certainly faster just to blow up the old one (in memory) and start over.\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning.reset!-Union{Tuple{PairAccumulator{T}}, Tuple{T}} where T","page":"API","title":"OnlineLogBinning.reset!","text":"reset!(pacc::PairAccumulator)\n\nReturn the PairAccumulator to its initial state. Presumably one just exported the  Tvalue and Svalue from it before the reset!.\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning.std_error-Tuple{BinningAccumulator}","page":"API","title":"OnlineLogBinning.std_error","text":"std_error( bacc::BinningAccumulator )\n\nOnline measurement of the [BinningAccumulator] standard error.\n\nAdditional information\n\nThis quantity is considered online despite that it is not regularly updated when data is push!ed from the stream.\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning.std_error-Tuple{LevelAccumulator}","page":"API","title":"OnlineLogBinning.std_error","text":"std_error( lacc::LevelAccumulator ) = sqrt(var_of_mean(lacc))\n\nOnline measurement of the [LevelAccumulator] standard error.\n\nAdditional information\n\nThis quantity is considered online despite that it is not regularly updated when data is push!ed from the stream.\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning.update_SandT!-Tuple{LevelAccumulator}","page":"API","title":"OnlineLogBinning.update_SandT!","text":"update_SandT!(lacc::LevelAccumulator)\n\nApply the Svalue and Tvalue formula to update lacc.Taccum and return the PairAccumulator Tvalue increment.\n\nAdditional information\n\nS must be updated before T since the former depends on the latter's history.\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning.update_num_bins!","page":"API","title":"OnlineLogBinning.update_num_bins!","text":"update_num_bins!(lacc::LevelAccumulator, [incr = 2])\n\nIncrement the number of bins accumulated by incr.\n\n\n\n\n\n","category":"function"},{"location":"#OnlineLogBinning.var_of_mean-Tuple{BinningAccumulator}","page":"API","title":"OnlineLogBinning.var_of_mean","text":"var_of_mean( bacc::BinningAccumulator; [level = 0] )\n\nOnline measurement of the [BinningAccumulator] variance of the mean.\n\nAdditional information\n\nThis quantity is considered online despite that it is not regularly updated when data is push!ed from the stream.\n\n\n\n\n\n","category":"method"},{"location":"#OnlineLogBinning.var_of_mean-Tuple{LevelAccumulator}","page":"API","title":"OnlineLogBinning.var_of_mean","text":"var_of_mean( lacc::LevelAccumulator ) = var(lacc) / lacc.num_bins\n\nOnline measurement of the [LevelAccumulator] variance of the mean.\n\nAdditional information\n\nThis quantity is considered online despite that it is not regularly updated when data is push!ed from the stream.\n\n\n\n\n\n","category":"method"},{"location":"#Statistics.mean-Tuple{BinningAccumulator}","page":"API","title":"Statistics.mean","text":"mean( bacc::BinningAccumulator; [level = 0] )\n\nOnline measurement of the [BinningAccumulator] mean.\n\nAdditional information\n\nThis quantity is considered online despite that it is not regularly updated when data is push!ed from the stream.\n\n\n\n\n\n","category":"method"},{"location":"#Statistics.mean-Tuple{LevelAccumulator}","page":"API","title":"Statistics.mean","text":"mean( lacc::LevelAccumulator )\n\nOnline measurement of the [LevelAccumulator] mean.\n\nAdditional information\n\nThis quantity is considered online despite that it is not regularly updated when data is push!ed from the stream.\n\n\n\n\n\n","category":"method"},{"location":"#Statistics.std-Tuple{BinningAccumulator}","page":"API","title":"Statistics.std","text":"std( bacc::BinningAccumulator )\n\nOnline measurement of the [BinningAccumulator] standard deviation.\n\nAdditional information\n\nThis quantity is considered online despite that it is not regularly updated when data is push!ed from the stream.\n\n\n\n\n\n","category":"method"},{"location":"#Statistics.std-Tuple{LevelAccumulator}","page":"API","title":"Statistics.std","text":"std( lacc::LevelAccumulator ) = sqrt(var(lacc))\n\nOnline measurement of the [LevelAccumulator] standard deviation.\n\nAdditional information\n\nThis quantity is considered online despite that it is not regularly updated when data is push!ed from the stream.\n\n\n\n\n\n","category":"method"},{"location":"#Statistics.var-Tuple{BinningAccumulator}","page":"API","title":"Statistics.var","text":"var( bacc::LevelAccumulator; [level = 0] )\n\nOnline measurement of the [BinningAccumulator] variance.\n\nAdditional information\n\nThis quantity is considered online despite that it is not regularly updated when data is push!ed from the stream.\n\n\n\n\n\n","category":"method"},{"location":"#Statistics.var-Tuple{LevelAccumulator}","page":"API","title":"Statistics.var","text":"var( lacc::LevelAccumulator )\n\nOnline measurement of the [LevelAccumulator] variance.\n\nAdditional information\n\nThis quantity is considered online despite that it is not regularly updated when data is push!ed from the stream.\n\n\n\n\n\n","category":"method"}]
}
